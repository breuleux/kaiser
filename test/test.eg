
require-macros:
   earl-mocha ->
      describe, it, before, after
      xdescribe, xit
      assert, asserts
      expect-error

require:
   ../src ->
      TYPEID
      register, register-all
      register-singleton, register-singletons
      serialize, deserialize

round{x} =
   deserialize{serialize{x}}

ok{obj} =
   ser = serialize{obj}
   obj2 = deserialize{ser}
   obj == obj2

ok-date{obj} =
   ser = serialize{obj}
   obj2 = deserialize{ser}
   Date? obj and Date? obj2 and String{obj} == String{obj2}

describe "serialize and deserialize":

   describe "primitives":
      asserts:
         ok: true
         ok: false
         ok: null
         ok: undefined

   describe "numbers":
      asserts:
         ok: 0
         ok: -13
         ok: 123
         ok: 10e24

   describe "strings":
      asserts:
         ok: "hello world"
         ok: "a\nbb\n  cc     dd"
         ok: "\u25c0 \u25b6"
         ok: "\"hi\" 'there'"

   describe "objects":
      asserts:
         ok: {a = 1, b = 2}
         ok: {a = {w = 1, x = 2}, b = {y = 3, z = 4}}
         ok: {hello = "world"}

   describe "arrays":
      asserts:
         ok: {1, 2, 3}
         ok: {"a", "b", {a = 3, b = {c = 5}}}

   describe "dates":
      asserts:
         ok-date: new Date{}
         ok-date: new Date{"2000/05/24"}


s{} =
   class Summer:
      constructor{@a, @b} =
         pass
      sum{} =
         @a + @b

describe "register":

   it "classes":
      Summer = s{}
      register{Summer.prototype, {type-id = "c:0"}}
      obj = Summer{10, 11}
      obj2 = deserialize{serialize{obj}}
      assert Summer? obj2
      assert obj2.sum{} === 21

   it "custom serialization":
      Summer = s{}
      register{Summer.prototype} with {
         type-id = "c:1"
         serialize{x} =
            '{x.a * 2}/{x.b * 2}'
         deserialize{x} =
            Summer{*x.split{"/"}}
      }
      obj = Summer{10, 11}
      obj2 = deserialize{serialize{obj}}
      assert Summer? obj2
      assert obj2.sum{} === "2022"

   it "functions":
      register-singleton{"f:0"}! f{x} =
         x * x
      assert ok{f}
      assert deserialize{serialize{f}}{4} === 16

   it "register-singletons":
      f{x} = x * x
      g{x} = x * 2
      register-singletons{{f, g}, "f:1"}
      assert ok{f}
      assert ok{g}
      assert f[TYPEID] === 'f:1/f'
      assert g[TYPEID] === 'f:1/g'

   it "register-singletons (2)":
      f{x} = x * x
      g{x} = x * 2
      register-singletons{{f, g}, {package = {name = "quack", version = "3.2.1"}}}
      assert ok{f}
      assert ok{g}
      assert f[TYPEID] === "npm:quack/f"
      assert g[TYPEID] === "npm:quack/g"


class charlie:
   f{} = 1234

describe "id generation":

   it "variants":
      g{name} =
         b = {=}
         b[name]{} = "name!!"
         register{b, {type-id = "C:2", variant = name}}
         b

      {.alice, .bob, .charlie} each name ->
         proto = g{name}
         obj = Object.create{proto} &: {'${name}' => '{name}?'}
         obj2 = round{obj}
         assert obj[name]{} === obj2[name]{}
         assert obj['${name}'] === '{name}?'
         assert proto[TYPEID] === 'C:2/"{name}"'

   it "from package information":
      mkpkg{use-version} =
         {package = {name = "olive", version = "3.2.1"}
          = use-version}

      test{obj, opts, expected} =
         register{obj, opts}
         assert obj[TYPEID] === expected

      alice{} = 123

      test{alice, mkpkg{null}, "npm:olive/alice"}
      test{{name = "bob"}, mkpkg{.major}, "npm:olive@3/bob"}
      test{charlie.prototype, mkpkg{.minor}, "npm:olive@3.2/charlie"}
      test{{name = "diana"}, mkpkg{.patch}, "npm:olive@3.2.1/diana"}


